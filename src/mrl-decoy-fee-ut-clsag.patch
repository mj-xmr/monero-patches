diff --git a/.gitmodules b/.gitmodules
index 3cf831bcd..054c2c9e4 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -18,3 +18,7 @@
 	path = external/supercop
 	url = https://github.com/monero-project/supercop
 	branch = monero
+[submodule "external/EnjoLib-mj"]
+	path = external/EnjoLib-mj
+	url = https://github.com/mj-xmr/EnjoLib-mj
+	branch = master
diff --git a/external/CMakeLists.txt b/external/CMakeLists.txt
index 7ae4ba750..cf11c5261 100644
--- a/external/CMakeLists.txt
+++ b/external/CMakeLists.txt
@@ -35,6 +35,8 @@
 # ...except for FreeBSD, because FreeBSD is a special case that doesn't play well with
 # others.
 
+
+
 find_package(Miniupnpc REQUIRED)
 
 message(STATUS "Using in-tree miniupnpc")
@@ -84,3 +86,11 @@ add_subdirectory(db_drivers)
 add_subdirectory(easylogging++)
 add_subdirectory(qrcodegen)
 add_subdirectory(randomx EXCLUDE_FROM_ALL)
+
+
+option(BUILD_BOOST "boost" OFF)
+option(BUILD_WX   "wx" OFF)
+option(BUILD_STAT_3RD "stat" OFF)
+option(BUILD_EL_TESTS "tests" OFF)
+add_subdirectory(EnjoLib-mj)
+
diff --git a/external/EnjoLib-mj b/external/EnjoLib-mj
new file mode 160000
index 000000000..f87243268
--- /dev/null
+++ b/external/EnjoLib-mj
@@ -0,0 +1 @@
+Subproject commit f87243268b48991dfb4af6e83415adad4e81b562
diff --git a/src/wallet/wallet2.cpp b/src/wallet/wallet2.cpp
index cc148dd49..9650193d1 100644
--- a/src/wallet/wallet2.cpp
+++ b/src/wallet/wallet2.cpp
@@ -13988,3 +13988,70 @@ std::pair<size_t, uint64_t> wallet2::estimate_tx_size_and_weight(bool use_rct, i
 }
 //----------------------------------------------------------------------------------------------------
 }
+
+uint64_t calculate_fee_wrap(bool use_per_byte_fee, const cryptonote::transaction &tx, size_t blob_size, uint64_t base_fee, uint64_t fee_multiplier, uint64_t fee_quantization_mask)
+{
+#ifdef HF_VERSION_2021_SCALING
+    return calculate_fee(use_per_byte_fee, tx, blob_size, base_fee, fee_quantization_mask);
+#else
+    return calculate_fee(use_per_byte_fee, tx, blob_size, base_fee, fee_multiplier, fee_quantization_mask);
+#endif
+}
+uint64_t calculate_fee_wrap(uint64_t fee_per_kb, size_t bytes, uint64_t fee_multiplier)
+{
+#ifdef HF_VERSION_2021_SCALING
+    return calculate_fee(fee_per_kb, bytes);
+#else
+    return calculate_fee(fee_per_kb, bytes, fee_multiplier);
+#endif
+}
+uint64_t calculate_fee_from_weight_wrap(uint64_t base_fee, uint64_t weight, uint64_t fee_multiplier, uint64_t fee_quantization_mask)
+{
+#ifdef HF_VERSION_2021_SCALING
+    return calculate_fee_from_weight(base_fee, weight, fee_quantization_mask);
+#else
+    return calculate_fee_from_weight(base_fee, weight, fee_multiplier, fee_quantization_mask);
+#endif
+}
+uint8_t get_bulletproof_fork_wrap()
+{
+    return get_bulletproof_fork();
+}
+uint8_t get_bulletproof_plus_fork_wrap()
+{
+    #ifdef HF_VERSION_2021_SCALING
+        return get_bulletproof_plus_fork();
+    #else
+        return 0;
+    #endif // HF_VERSION_2021_SCALING
+}
+uint8_t get_clsag_fork_wrap()
+{
+#ifdef HF_VERSION_CLSAG // rougher way of detecting CLSAG
+    return get_clsag_fork();
+#else
+    return 0;
+#endif
+}
+uint8_t get_view_tag_fork_wrap()
+{
+    #ifdef HF_VERSION_2021_SCALING
+        return get_view_tag_fork();
+    #else
+        return 0;
+    #endif // HF_VERSION_2021_SCALING
+}
+
+size_t estimate_tx_size_wrap(bool use_rct, int n_inputs, int mixin, int n_outputs, size_t extra_size, bool bulletproof, bool clsag, bool bulletproof_plus, bool use_view_tags)
+{
+#ifdef HF_VERSION_CLSAG // rougher way of detecting CLSAG
+    #ifdef HF_VERSION_2021_SCALING
+        return estimate_tx_size(use_rct, n_inputs, mixin, n_outputs, extra_size, bulletproof, clsag, bulletproof_plus, use_view_tags);
+    #else
+        return estimate_tx_size(use_rct, n_inputs, mixin, n_outputs, extra_size, bulletproof, clsag);
+    #endif
+#else // HF_VERSION_CLSAG
+    return estimate_tx_size(use_rct, n_inputs, mixin, n_outputs, extra_size, bulletproof);
+#endif
+}
+
diff --git a/src/wallet/wallet2.h b/src/wallet/wallet2.h
index 8d54ec20d..734c40698 100644
--- a/src/wallet/wallet2.h
+++ b/src/wallet/wallet2.h
@@ -110,7 +110,7 @@ namespace tools
       result_type operator()() { return crypto::rand<result_type>(); }
     } engine;
 
-private:
+protected:
     std::gamma_distribution<double> gamma;
     const std::vector<uint64_t> &rct_offsets;
     const uint64_t *begin, *end;
@@ -2319,3 +2319,12 @@ namespace tools
   }
   //----------------------------------------------------------------------------------------------------
 }
+
+uint64_t calculate_fee_wrap(bool use_per_byte_fee, const cryptonote::transaction &tx, size_t blob_size, uint64_t base_fee, uint64_t fee_multiplier, uint64_t fee_quantization_mask);
+uint64_t calculate_fee_wrap(uint64_t fee_per_kb, size_t bytes, uint64_t fee_multiplier);
+uint64_t calculate_fee_from_weight_wrap(uint64_t base_fee, uint64_t weight, uint64_t fee_multiplier, uint64_t fee_quantization_mask);
+uint8_t get_bulletproof_fork_wrap();
+uint8_t get_bulletproof_plus_fork_wrap();
+uint8_t get_clsag_fork_wrap();
+uint8_t get_view_tag_fork_wrap();
+size_t estimate_tx_size_wrap(bool use_rct, int n_inputs, int mixin, int n_outputs, size_t extra_size, bool bulletproof, bool clsag, bool bulletproof_plus, bool use_view_tags);
diff --git a/tests/unit_tests/CMakeLists.txt b/tests/unit_tests/CMakeLists.txt
index a5984b2c9..5e099faf0 100644
--- a/tests/unit_tests/CMakeLists.txt
+++ b/tests/unit_tests/CMakeLists.txt
@@ -97,6 +97,13 @@ set(unit_tests_sources
   aligned.cpp
   rpc_version_str.cpp
   zmq_rpc.cpp)
+  
+set(unit_tests_sources
+#  decoy.cpp
+  decoy_wrappers.cpp
+  fee_fingerprinting.cpp
+  main.cpp
+)
 
 set(unit_tests_headers
   unit_tests_utils.h)
@@ -106,6 +113,7 @@ add_executable(unit_tests
   ${unit_tests_headers})
 target_link_libraries(unit_tests
   PRIVATE
+    EnjoLib
     ringct
     cryptonote_protocol
     cryptonote_core
@@ -136,6 +144,8 @@ if (NOT MSVC)
       COMPILE_FLAGS " -Wno-undef -Wno-sign-compare")
 endif ()
 
+#monero_use_pch_private(unit_tests pch_ut.h)
+
 SET_PROPERTY(SOURCE main.cpp PROPERTY COMPILE_FLAGS -DDEFAULT_DATA_DIR="\\"${CMAKE_SOURCE_DIR}/tests/data\\"")
 
 SET_PROPERTY(SOURCE memwipe.cpp PROPERTY COMPILE_FLAGS -Ofast)
