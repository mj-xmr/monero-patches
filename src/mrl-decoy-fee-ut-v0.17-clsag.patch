diff --git a/src/wallet/wallet2.cpp b/src/wallet/wallet2.cpp
index cc148dd49..88760b656 100644
--- a/src/wallet/wallet2.cpp
+++ b/src/wallet/wallet2.cpp
@@ -13988,3 +13988,28 @@ std::pair<size_t, uint64_t> wallet2::estimate_tx_size_and_weight(bool use_rct, i
 }
 //----------------------------------------------------------------------------------------------------
 }
+
+uint64_t calculate_fee_wrap(bool use_per_byte_fee, const cryptonote::transaction &tx, size_t blob_size, uint64_t base_fee, uint64_t fee_multiplier, uint64_t fee_quantization_mask)
+{
+    return calculate_fee(use_per_byte_fee, tx, blob_size, base_fee, fee_multiplier, fee_quantization_mask);
+}
+uint64_t calculate_fee_wrap(uint64_t fee_per_kb, size_t bytes, uint64_t fee_multiplier)
+{
+    return calculate_fee(fee_per_kb, bytes, fee_multiplier);
+}
+uint64_t calculate_fee_from_weight_wrap(uint64_t base_fee, uint64_t weight, uint64_t fee_multiplier, uint64_t fee_quantization_mask)
+{
+    return calculate_fee_from_weight(base_fee, weight, fee_multiplier, fee_quantization_mask);
+}
+uint8_t get_bulletproof_fork_wrap()
+{
+    return get_bulletproof_fork();
+}
+uint8_t get_clsag_fork_wrap()
+{
+    return get_clsag_fork();
+}
+size_t estimate_tx_size_wrap(bool use_rct, int n_inputs, int mixin, int n_outputs, size_t extra_size, bool bulletproof, bool clsag)
+{
+    return estimate_tx_size(use_rct, n_inputs, mixin, n_outputs, extra_size, bulletproof, clsag);
+}
\ No newline at end of file
diff --git a/src/wallet/wallet2.h b/src/wallet/wallet2.h
index 8d54ec20d..953d4d2ea 100644
--- a/src/wallet/wallet2.h
+++ b/src/wallet/wallet2.h
@@ -110,7 +110,7 @@ namespace tools
       result_type operator()() { return crypto::rand<result_type>(); }
     } engine;
 
-private:
+protected:
     std::gamma_distribution<double> gamma;
     const std::vector<uint64_t> &rct_offsets;
     const uint64_t *begin, *end;
@@ -2319,3 +2319,10 @@ namespace tools
   }
   //----------------------------------------------------------------------------------------------------
 }
+
+uint64_t calculate_fee_wrap(bool use_per_byte_fee, const cryptonote::transaction &tx, size_t blob_size, uint64_t base_fee, uint64_t fee_multiplier, uint64_t fee_quantization_mask);
+uint64_t calculate_fee_wrap(uint64_t fee_per_kb, size_t bytes, uint64_t fee_multiplier);
+uint64_t calculate_fee_from_weight_wrap(uint64_t base_fee, uint64_t weight, uint64_t fee_multiplier, uint64_t fee_quantization_mask);
+uint8_t get_bulletproof_fork_wrap();
+uint8_t get_clsag_fork_wrap();
+size_t estimate_tx_size_wrap(bool use_rct, int n_inputs, int mixin, int n_outputs, size_t extra_size, bool bulletproof, bool clsag);
\ No newline at end of file
diff --git a/tests/unit_tests/CMakeLists.txt b/tests/unit_tests/CMakeLists.txt
index a5984b2c9..8b3c030a4 100644
--- a/tests/unit_tests/CMakeLists.txt
+++ b/tests/unit_tests/CMakeLists.txt
@@ -97,6 +97,12 @@ set(unit_tests_sources
   aligned.cpp
   rpc_version_str.cpp
   zmq_rpc.cpp)
+  
+set(unit_tests_sources
+#  decoy.cpp
+  decoy_wrappers.cpp
+  main.cpp
+)
 
 set(unit_tests_headers
   unit_tests_utils.h)
@@ -106,19 +112,19 @@ add_executable(unit_tests
   ${unit_tests_headers})
 target_link_libraries(unit_tests
   PRIVATE
-    ringct
+ #   ringct
     cryptonote_protocol
-    cryptonote_core
-    daemon_messages
-    daemon_rpc_server
-    blockchain_db
-    lmdb_lib
-    rpc
-    net
-    serialization
+#    cryptonote_core
+#    daemon_messages
+#    daemon_rpc_server
+#    blockchain_db
+#    lmdb_lib
+#    rpc
+#    net
+#    serialization
     wallet
-    p2p
-    version
+#    p2p
+#    version
     ${Boost_CHRONO_LIBRARY}
     ${Boost_THREAD_LIBRARY}
     ${GTEST_LIBRARIES}
@@ -136,6 +142,8 @@ if (NOT MSVC)
       COMPILE_FLAGS " -Wno-undef -Wno-sign-compare")
 endif ()
 
+#monero_use_pch_private(unit_tests pch_ut.h)
+
 SET_PROPERTY(SOURCE main.cpp PROPERTY COMPILE_FLAGS -DDEFAULT_DATA_DIR="\\"${CMAKE_SOURCE_DIR}/tests/data\\"")
 
 SET_PROPERTY(SOURCE memwipe.cpp PROPERTY COMPILE_FLAGS -Ofast)
diff --git a/tests/unit_tests/decoy.cpp b/tests/unit_tests/decoy.cpp
new file mode 100644
index 000000000..67a74cc21
--- /dev/null
+++ b/tests/unit_tests/decoy.cpp
@@ -0,0 +1,220 @@
+// Copyright (c) 2018-2022, The Monero Project
+
+// 
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without modification, are
+// permitted provided that the following conditions are met:
+// 
+// 1. Redistributions of source code must retain the above copyright notice, this list of
+//    conditions and the following disclaimer.
+// 
+// 2. Redistributions in binary form must reproduce the above copyright notice, this list
+//    of conditions and the following disclaimer in the documentation and/or other
+//    materials provided with the distribution.
+// 
+// 3. Neither the name of the copyright holder nor the names of its contributors may be
+//    used to endorse or promote products derived from this software without specific
+//    prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
+// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//#include "pch_ut.h"
+#include "decoy_wrappers.h"
+#include "cryptonote_config.h"
+#include "gtest/gtest.h"
+
+#include <iostream>
+#include <iomanip>
+#include <fstream>
+#include <cmath>
+
+/*
+Each test is accompanied with the previous decision lines and last line, which is reached by this decision branch.
+Currently referenced tag = v0.17.3.0
+*/
+
+namespace {
+    void run_picker(int minMul, int maxMul, int numDraws = 100, const std::string & fileNameOut = "")
+{
+    // https://github.com/monero-project/monero/blob/v0.17.3.0/src/wallet/wallet2.cpp#L1079
+    /*
+    Statistically probe how often the picks are good at which multiplier of the MIN_RCT_LENGTH
+    */
+    std::cout << "Running picker " << maxMul << " down to " << minMul << ", num draws = " << numDraws << '\n';
+    const int NUM_DRAWS = numDraws;
+    const char * fileNameOutAggregate  = "/tmp/mrl_mul_2_ratio_good.csv";
+    std::ofstream foutAggr(fileNameOutAggregate);
+    std::ofstream fout;
+    double mulPrev = 0;
+    for (double mul = maxMul; mul > minMul; mul *= 0.85)
+    {
+        mul = std::roundf(mul);
+        if (mul == mulPrev)
+        {
+            break;
+        }
+        mulPrev = mul;
+        const uint64_t len = wallet2_wrapper::MIN_RCT_LENGTH * mul;
+        wallet2_wrapper wrapper;
+        const std::vector<uint64_t> rct_offsets = wrapper.init_offests(len);
+        wrapper.gamma_pick_reinit(rct_offsets);
+        int num_hits = 0;
+        std::vector<uint64_t> picks;
+        picks.reserve(numDraws);
+        for (int i = 0; i < NUM_DRAWS; ++i)
+        {
+            //continue;
+            const uint64_t pick = wrapper.gamma_pick_inited();
+            if (pick == wallet2_wrapper::BAD_PICK)
+            {
+                continue;
+            }
+            //if (pick != wallet2_wrapper::BAD_PICK)
+            {
+                picks.push_back(pick);
+                ++num_hits;
+            }
+        }
+        if (fileNameOut.size())
+        {
+            const std::string name = fileNameOut + "_" + std::to_string(int(std::floor(mul))) + ".csv";
+            fout = std::ofstream(name);
+            for (auto pick : picks)
+            {
+                fout << pick << '\n';
+            }
+            std::cout << "Data stored in = " << name << std::endl;
+        }
+        const double ratio_good_picks = num_hits / double(NUM_DRAWS);
+        if (foutAggr.is_open())
+        {
+            foutAggr << mul << " " << ratio_good_picks << '\n';
+        }
+        std::cout << "mul = " << mul << ",\tRatio good 2 all = " << ratio_good_picks << std::endl;
+    }
+    std::cout << "Num draws = " << NUM_DRAWS << std::endl;
+    if (foutAggr.is_open())
+    {
+        std::cout << "Data stored in = " << fileNameOutAggregate << std::endl;
+    }
+}
+
+}
+
+TEST(decoy, gamma_tsesadas)
+{
+    return;
+    // https://github.com/monero-project/monero/blob/v0.17.3.0/src/wallet/wallet2.cpp#L1029
+    //const double mul = 1000;
+    const int NUM_DRAWS = 10000;
+    const char * fileNameOut = "/tmp/mrl_test";
+    const double mul = 1;
+    const uint64_t len = std::floor(wallet2_wrapper::MIN_RCT_LENGTH * mul);
+    std::cout << "Mul = " << mul << ", len = " << len << " wallet2_wrapper::MIN_RCT_LENGTH = " << wallet2_wrapper::MIN_RCT_LENGTH << std::endl;
+    //EXPECT_NO_THROW(wallet2_wrapper().gamma(len));
+    run_picker(mul, mul, NUM_DRAWS, fileNameOut);
+}
+
+TEST(decoy, gamma_export_distrib)
+{
+    const int NUM_DRAWS = 5000;
+    const char * fileNameOut  = "/tmp/mrl_gamma_distrib.csv";
+    std::ofstream fout(fileNameOut);
+    for (double i = 0; i <= NUM_DRAWS ; ++i)
+    {
+        //std::cout << "i = " << i << std::endl;
+        const double val = wallet2_wrapper().gamma_distrib(i);
+        fout << val << '\n';
+        //std::cout << "i = " << i << ", gamma = " << val << std::endl;
+    }
+    std::cout << "Gamma Data stored in = " << fileNameOut << std::endl;
+}
+
+TEST(decoy, gamma_lessEqual_than_spendable_age_Throws)
+{
+    // https://github.com/monero-project/monero/blob/v0.17.3.0/src/wallet/wallet2.cpp#L1020
+    EXPECT_ANY_THROW(wallet2_wrapper().gamma(wallet2_wrapper::MIN_RCT_LENGTH - 1));
+}
+
+TEST(decoy, gamma_more_than_spendable_age_constructOK)
+{
+    // https://github.com/monero-project/monero/blob/v0.17.3.0/src/wallet/wallet2.cpp#L1029
+    EXPECT_NO_THROW(wallet2_wrapper().gamma(wallet2_wrapper::MIN_RCT_LENGTH));
+}
+
+TEST(decoy, gamma_more_than_spendable_age_badPick)
+{
+    // https://github.com/monero-project/monero/blob/v0.17.3.0/src/wallet/wallet2.cpp#L1053
+    // https://github.com/monero-project/monero/blob/v0.17.3.0/src/wallet/wallet2.cpp#L1067
+    const uint64_t pick = wallet2_wrapper().gamma_pick(wallet2_wrapper::MIN_RCT_LENGTH);
+    ASSERT_EQ(pick, wallet2_wrapper::BAD_PICK);
+}
+
+TEST(decoy, gamma_more_than_spendable_age_goodPickAtLeastOnce)
+{
+    // https://github.com/monero-project/monero/blob/v0.17.3.0/src/wallet/wallet2.cpp#L1079
+    const int NUM_DRAWS = 50;
+    for (double mul = 10; mul <= 1e4; mul *= 1.40)
+    {
+        for (int i = 0; i < NUM_DRAWS; ++i)
+        {
+            const uint64_t pick = wallet2_wrapper().gamma_pick(wallet2_wrapper::MIN_RCT_LENGTH * mul);
+            if (pick != wallet2_wrapper::BAD_PICK)
+            {
+                return; // Success: Found at least one good pick
+            }
+        }
+    }
+    FAIL(); // If we reached here, it means we haven't found any good picks, but we should have.
+}
+
+// Note: This is technically NOT a unit test, because it's too intense.
+TEST(decoy, gamma_more_than_spendable_age_goodPickStatistical)
+{
+    // https://github.com/monero-project/monero/blob/v0.17.3.0/src/wallet/wallet2.cpp#L1079
+    /*
+    Statistically probe how often the picks are good at which multiplier of the MIN_RCT_LENGTH
+    */
+    const int NUM_DRAWS = 100000;
+    //const int NUM_DRAWS = 10000;
+    //const int NUM_DRAWS = 100;
+    const char * fileNameOut = "/tmp/mrl_pick_mul_length";
+    run_picker(1, 1e5, NUM_DRAWS, fileNameOut);
+}
+
+TEST(decoy, gamma_multiple)
+{
+    // https://github.com/monero-project/monero/blob/v0.17.3.0/src/wallet/wallet2.cpp#L1079
+    /*
+    Statistically probe how often the picks are good at which multiplier of the MIN_RCT_LENGTH
+    */
+    //const int NUM_DRAWS = 100000; // Full blown, but the results are quite unreal.
+    const int NUM_DRAWS = 100; // Minimalistic, yet still delivers convincing results
+    const std::string fileNameOutBase = "/tmp/mrl_mul_2_ratio_good_";
+    const int maxFiles = 20;
+    for (int i = 10; i < maxFiles; ++i)
+    {
+        //std::cout << "Running " << i << " of " << maxFiles << '\n';
+        //run_picker(1, 1e5, NUM_DRAWS, fileNameOutBase + std::to_string(i) + ".csv");    // This matches the Python implementation
+    }
+}
+
+TEST(decoy, gamma_test)
+{
+    // https://github.com/monero-project/monero/blob/v0.17.3.0/src/wallet/wallet2.cpp#L1079
+    /*
+    A corner case for the Python version, where anything below 50 crashes the calculations
+    */
+    const int NUM_DRAWS = 100;
+    //run_picker(1, 50, NUM_DRAWS);
+}
+
+
diff --git a/tests/unit_tests/decoy_wrappers.cpp b/tests/unit_tests/decoy_wrappers.cpp
new file mode 100644
index 000000000..dbac8cb2b
--- /dev/null
+++ b/tests/unit_tests/decoy_wrappers.cpp
@@ -0,0 +1,195 @@
+// Copyright (c) 2018-2022, The Monero Project
+
+// 
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without modification, are
+// permitted provided that the following conditions are met:
+// 
+// 1. Redistributions of source code must retain the above copyright notice, this list of
+//    conditions and the following disclaimer.
+// 
+// 2. Redistributions in binary form must reproduce the above copyright notice, this list
+//    of conditions and the following disclaimer in the documentation and/or other
+//    materials provided with the distribution.
+// 
+// 3. Neither the name of the copyright holder nor the names of its contributors may be
+//    used to endorse or promote products derived from this software without specific
+//    prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
+// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//#include "pch_ut.h"
+#include "decoy_wrappers.h"
+#include "wallet/wallet2.h"
+
+#define GAMMA_SHAPE 19.28
+#define GAMMA_SCALE (1/1.61)
+
+extern "C" {
+//#include "crypto/keccak.h"
+}
+
+/// Currently, a bad pick is defined as max unsigned
+const uint64_t wallet2_wrapper::BAD_PICK = std::numeric_limits<uint64_t>::max();
+/// Under this length of the RCT vector, an exception is thrown of too low a length of the rct vector.
+const uint64_t wallet2_wrapper::MIN_RCT_LENGTH = CRYPTONOTE_DEFAULT_TX_SPENDABLE_AGE + 1;
+
+wallet2_wrapper::wallet2_wrapper()
+: pwallet(std::unique_ptr<tools::wallet2>())
+{
+
+}
+wallet2_wrapper::~wallet2_wrapper()
+{
+
+}
+namespace tools {
+class gamma_picker_my : public gamma_picker
+{
+public:
+    using gamma_picker::gamma_picker;
+    void dump_vars(const std::string & filename, const std::string & id) const;
+};
+}
+
+void wallet2_wrapper::gamma(uint64_t numberRCTs) const
+{
+    const std::vector<uint64_t> rct_offsets = init_offests(numberRCTs);
+    tools::gamma_picker_my picker(rct_offsets);
+    picker.dump_vars("", "");
+}
+
+uint64_t wallet2_wrapper::gamma_pick(uint64_t numberRCTs) const
+{
+    const std::vector<uint64_t> rct_offsets = init_offests(numberRCTs);
+    tools::gamma_picker_my picker(rct_offsets);
+    const uint64_t pick = picker.pick();
+    return pick;
+}
+
+void wallet2_wrapper::gamma_pick_reinit(const std::vector<uint64_t> & rct_offsets)
+{
+    //if (ppicker == nullptr)
+    {
+        ppicker.reset(new tools::gamma_picker_my(rct_offsets));
+        //ppicker->dump_vars("", "");
+        int a = 0; int b =a ;
+    }
+}
+
+uint64_t wallet2_wrapper::gamma_pick_inited() const
+{
+    //return 0;
+    const uint64_t pick = ppicker->pick();
+    return pick;
+}
+
+std::vector<uint64_t> wallet2_wrapper::init_offests(uint64_t numberRCTs) const
+{
+    std::vector<uint64_t> rct_offsets;
+    for (uint64_t i = 0; i < numberRCTs; ++i)
+    {
+        rct_offsets.push_back(i + 1);
+        //rct_offsets.push_back(1); // Should make no difference, since the values aren't really read (?)
+    }
+    return rct_offsets;
+}
+
+static uint64_t xxx = 3;
+struct gamma_engine_x
+    {
+        //gamma_engine_x(uint64_t x)
+        //:x (x)
+        //{
+
+        //}
+        //uint64_t x = 0;
+      typedef uint64_t result_type;
+      static constexpr result_type min() { return 0; }
+      static constexpr result_type max() { return std::numeric_limits<result_type>::max(); }
+      //result_type max() { return x; }
+      result_type operator()() { return xxx++; }
+    } ;
+
+    struct gamma_engine
+    {
+      typedef uint64_t result_type;
+      static constexpr result_type min() { return 0; }
+      static constexpr result_type max() { return std::numeric_limits<result_type>::max(); }
+      result_type operator()() { return crypto::rand<result_type>(); }
+    };
+
+double wallet2_wrapper::gamma_distrib(double x) const
+{
+    std::gamma_distribution<double> gamma = std::gamma_distribution<double>(GAMMA_SHAPE, GAMMA_SCALE);
+    //auto engine = gamma_engine_x(x);
+    //auto engine = gamma_engine_x();
+    auto engine = gamma_engine();
+    return gamma(engine);
+}
+
+//bool wallet2_wrapper::tx_add_fake_output_wrap(std::vector<std::vector<tools::wallet2::get_outs_entry>> &outs, uint64_t global_index, const crypto::public_key& output_public_key, const rct::key& mask, uint64_t real_index, bool unlocked) const
+//{
+
+//}
+
+// void wallet2::get_outs
+
+
+namespace tools {
+void gamma_picker_my::dump_vars(const std::string & filename, const std::string & id) const
+{
+    std::cout << "Dumping " << id << " to: " << filename << std::endl;
+    std::cout << "rct_offsets.front() = " << rct_offsets.front() << std::endl;
+    std::cout << "rct_offsets.back() = " << rct_offsets.back() << std::endl;
+    
+    std::cout << "rct_offsets.size() = " << rct_offsets.size() << std::endl;
+    std::cout << "end - begin = " << end - begin  << std::endl;
+    std::cout << "num_rct_outputs = " << num_rct_outputs  << std::endl;
+    std::cout << "average_output_time = " << average_output_time  << std::endl << std::endl;
+}
+
+}
+
+uint64_t wallet2_wrapper::calculate_fee(bool use_per_byte_fee, const cryptonote::transaction &tx, size_t blob_size, uint64_t base_fee, uint64_t fee_multiplier, uint64_t fee_quantization_mask) const
+{
+    return calculate_fee_wrap(use_per_byte_fee, tx, blob_size, base_fee, fee_multiplier, fee_quantization_mask);
+}
+
+uint64_t wallet2_wrapper::calculate_fee(uint64_t fee_per_kb, size_t bytes, uint64_t fee_multiplier) const
+{
+    return calculate_fee_wrap(fee_per_kb, bytes, fee_multiplier);
+}
+
+uint64_t wallet2_wrapper::calculate_fee_from_weight(uint64_t base_fee, uint64_t weight, uint64_t fee_multiplier, uint64_t fee_quantization_mask) const
+{
+    return calculate_fee_from_weight_wrap(base_fee, weight, fee_multiplier, fee_quantization_mask);
+}
+
+uint64_t wallet2_wrapper::create_transactions_2_dummy() const
+{
+    const bool use_rct = pwallet->use_fork_rules(4, 0);
+    const bool bulletproof = pwallet->use_fork_rules(get_bulletproof_fork_wrap(), 0);
+    const bool clsag = pwallet->use_fork_rules(get_clsag_fork_wrap(), 0);
+    
+    std::vector<uint8_t> extra = {0, 1, 3};
+    uint32_t priority = 3;
+    const size_t fake_outs_count = 6;
+    
+    const uint64_t base_fee  = pwallet->get_base_fee();
+    const uint64_t fee_multiplier = pwallet->get_fee_multiplier(priority, pwallet->get_fee_algorithm());
+    const uint64_t fee_quantization_mask = pwallet->get_fee_quantization_mask();
+
+
+    const uint64_t min_fee = (fee_multiplier * base_fee * estimate_tx_size_wrap(use_rct, 1, fake_outs_count, 2, extra.size(), bulletproof, clsag));
+
+    return min_fee;
+}
\ No newline at end of file
diff --git a/tests/unit_tests/decoy_wrappers.h b/tests/unit_tests/decoy_wrappers.h
new file mode 100644
index 000000000..940db94eb
--- /dev/null
+++ b/tests/unit_tests/decoy_wrappers.h
@@ -0,0 +1,74 @@
+// Copyright (c) 2018-2022, The Monero Project
+
+// 
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without modification, are
+// permitted provided that the following conditions are met:
+// 
+// 1. Redistributions of source code must retain the above copyright notice, this list of
+//    conditions and the following disclaimer.
+// 
+// 2. Redistributions in binary form must reproduce the above copyright notice, this list
+//    of conditions and the following disclaimer in the documentation and/or other
+//    materials provided with the distribution.
+// 
+// 3. Neither the name of the copyright holder nor the names of its contributors may be
+//    used to endorse or promote products derived from this software without specific
+//    prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
+// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+#include <memory>
+#include <vector>
+
+namespace tools
+{
+    class wallet2;
+    //class gamma_picker;
+    class gamma_picker_my;
+}
+
+namespace cryptonote
+{
+    class transaction;
+}
+
+class wallet2_wrapper
+{
+public:
+    wallet2_wrapper();
+    virtual ~wallet2_wrapper();
+    
+    void gamma(uint64_t numberRCTs) const;
+    uint64_t gamma_pick(uint64_t numberRCTs) const;
+    void gamma_pick_reinit(const std::vector<uint64_t> & numberRCTs);
+    uint64_t gamma_pick_inited() const;
+    std::vector<uint64_t> init_offests(uint64_t numberRCTs) const;
+    double gamma_distrib(double x) const;
+    
+    //bool tx_add_fake_output_wrap(std::vector<std::vector<tools::wallet2::get_outs_entry>> &outs, uint64_t global_index, const crypto::public_key& output_public_key, const rct::key& mask, uint64_t real_index, bool unlocked) const;
+    
+    static const uint64_t BAD_PICK;
+    static const uint64_t MIN_RCT_LENGTH;
+    
+    
+    uint64_t calculate_fee(bool use_per_byte_fee, const cryptonote::transaction &tx, size_t blob_size, uint64_t base_fee, uint64_t fee_multiplier, uint64_t fee_quantization_mask) const;
+    uint64_t calculate_fee(uint64_t fee_per_kb, size_t bytes, uint64_t fee_multiplier) const;
+    uint64_t calculate_fee_from_weight(uint64_t base_fee, uint64_t weight, uint64_t fee_multiplier, uint64_t fee_quantization_mask) const;
+    
+    uint64_t create_transactions_2_dummy() const;
+
+    
+private:
+    std::unique_ptr<tools::wallet2> pwallet;
+    std::unique_ptr<tools::gamma_picker_my> ppicker;
+};
\ No newline at end of file
