diff --git a/CMakeLists.txt b/CMakeLists.txt
index e858b3aaf..39b027f6f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -314,6 +314,10 @@ enable_testing()
 
 option(BUILD_DOCUMENTATION "Build the Doxygen documentation." ON)
 option(BUILD_TESTS "Build tests." OFF)
+# TESTS_REUSE_CACHE Should remain OFF by default for safety reasons:
+# Somebody could generate proper data and cache it, then break the data generation routines
+# but pass the tests using the previously cached data.
+option(TESTS_REUSE_CACHE "Reuse data generated by tests." OFF)
 if (CMAKE_BUILD_TYPE STREQUAL "Debug")
   set(DEFAULT_BUILD_DEBUG_UTILITIES ON)
 else()
diff --git a/Makefile b/Makefile
index 928942721..1491fc164 100644
--- a/Makefile
+++ b/Makefile
@@ -100,7 +100,7 @@ release-test:
 
 release-all:
 	mkdir -p $(builddir)/release
-	cd $(builddir)/release && cmake -D BUILD_TESTS=ON -D CMAKE_BUILD_TYPE=release $(topdir) && $(MAKE)
+	cd $(builddir)/release && cmake -D BUILD_TESTS=ON -D CMAKE_BUILD_TYPE=release -DBoost_INCLUDE_DIR="/home/enjo/devel/lib/tree/include" -DARCH="default" -DBUILD_TESTS=ON -DTESTS_REUSE_CACHE=ON -DBUILD_DEBUG_UTILITIES=ON -DUSE_DEVICE_TREZOR=ON -DUSE_DEVICE_TREZOR_LIBUSB=ON -DBUILD_GUI_DEPS=OFF -DUSE_READLINE=ON -DBUILD_SHARED_LIBS=ON $(topdir) && $(MAKE)
 
 release-static:
 	mkdir -p $(builddir)/release
diff --git a/tests/core_tests/CMakeLists.txt b/tests/core_tests/CMakeLists.txt
index 7455639ca..69db9869c 100644
--- a/tests/core_tests/CMakeLists.txt
+++ b/tests/core_tests/CMakeLists.txt
@@ -87,6 +87,21 @@ set_property(TARGET core_tests
   PROPERTY
     FOLDER "tests")
 
-add_test(
-  NAME    core_tests
-  COMMAND core_tests --generate_and_play_test_data)
+
+if (TESTS_REUSE_CACHE)
+  # The most time spend by core_tests is generating the test data. It makes sense to reuse them.
+
+  # Such a simplified test cache directory was chosen, for it to be easily accessible from the Workflows.
+  set(DIR_TEST_CACHE "${PROJECT_SOURCE_DIR}/build/test_cache")
+  add_test(
+    NAME    core_tests
+    # Chaining commands is only possible via sh.
+    COMMAND sh -c "./core_tests --generate_test_data --test_data_path=${DIR_TEST_CACHE} && ./core_tests --play_test_data --test_data_path=${DIR_TEST_CACHE}"
+  )
+else()
+  add_test(
+    NAME    core_tests
+    COMMAND core_tests --generate_and_play_test_data
+  )
+endif()
+
diff --git a/tests/core_tests/chaingen.h b/tests/core_tests/chaingen.h
index a5fd35028..d76aae313 100644
--- a/tests/core_tests/chaingen.h
+++ b/tests/core_tests/chaingen.h
@@ -56,6 +56,7 @@
 #include "cryptonote_protocol/enums.h"
 #include "cryptonote_basic/cryptonote_boost_serialization.h"
 #include "misc_language.h"
+#include "file_io_utils.h"
 
 #undef MONERO_DEFAULT_LOG_CATEGORY
 #define MONERO_DEFAULT_LOG_CATEGORY "tests.core"
@@ -816,12 +817,20 @@ inline bool do_replay_file(const std::string& filename)
   std::vector<test_event_entry> events;
   if (!tools::unserialize_obj_from_file(events, filename))
   {
-    MERROR("Failed to deserialize data from file: ");
+    MERROR("Failed to deserialize data from file: " + filename);
     return false;
   }
   return do_replay_events<t_test_class>(events);
 }
 
+enum class GenPlayMode
+{
+    GEN_MODE_NONE,
+    GEN_MODE_GENERATE,          // Generates data and serializes them
+    GEN_MODE_PLAY,              // Deserializes data and plays them
+    GEN_MODE_GENERATE_AND_PLAY  // Generates data and plays them without serialization / deserialization
+};
+
 //--------------------------------------------------------------------------
 #define DEFAULT_HARDFORKS(HARDFORKS) do { \
   HARDFORKS.push_back(std::make_pair((uint8_t)1, (uint64_t)0)); \
@@ -981,25 +990,41 @@ inline bool do_replay_file(const std::string& filename)
 
 #define SET_EVENT_VISITOR_SETT(VEC_EVENTS, SETT) VEC_EVENTS.push_back(event_visitor_settings(SETT));
 
-#define GENERATE(filename, genclass) \
-    { \
-        std::vector<test_event_entry> events; \
-        genclass g; \
-        g.generate(events); \
-        if (!tools::serialize_obj_to_file(events, filename)) \
-        { \
-            MERROR("Failed to serialize data to file: " << filename); \
-            throw std::runtime_error("Failed to serialize data to file"); \
-        } \
+#define GENERATE(filename, genclass)                                                                       \
+  if (epee::file_io_utils::is_file_exist(filename))                                                        \
+  {                                                                                                        \
+    MGINFO_GREEN("Already generated file: " << filename);                                                  \
+  }                                                                                                        \
+  else                                                                                                     \
+  {                                                                                                        \
+    std::vector<test_event_entry> events;                                                                  \
+    genclass g;                                                                                            \
+    g.generate(events);                                                                                    \
+    if (tools::serialize_obj_to_file(events, filename))                                                    \
+    {                                                                                                      \
+      MGINFO_GREEN("Successfully serialized file: " << filename);                                          \
+    }                                                                                                      \
+    else                                                                                                   \
+    {                                                                                                      \
+      MERROR("Failed to serialize data to file: " << filename);                                            \
+      throw std::runtime_error("Failed to serialize data to file");                                        \
+    }                                                                                                      \
+  }                                                                                                        \
+    
+#define REPLAY_REPORTING(genclass, success)                                                                \
+    if (success)                                                                                           \
+    {                                                                                                      \
+      MGINFO_GREEN("#TEST# Succeeded " << #genclass);                                                      \
+    }                                                                                                      \
+    else                                                                                                   \
+    {                                                                                                      \
+      MERROR("#TEST# Failed " << #genclass);                                                               \
+      failed_tests.push_back(#genclass);                                                                   \
     }
 
-
 #define PLAY(filename, genclass) \
-    if(!do_replay_file<genclass>(filename)) \
-    { \
-      MERROR("Failed to pass test : " << #genclass); \
-      return 1; \
-    }
+    ++tests_count; \
+    REPLAY_REPORTING(genclass, do_replay_file<genclass>(filename))
 
 #define CATCH_REPLAY(genclass)                                                                             \
     catch (const std::exception& ex)                                                                       \
@@ -1012,16 +1037,8 @@ inline bool do_replay_file(const std::string& filename)
     }
 
 #define REPLAY_CORE(genclass)                                                                              \
-    if (generated && do_replay_events< genclass >(events))                                                 \
-    {                                                                                                      \
-      MGINFO_GREEN("#TEST# Succeeded " << #genclass);                                                      \
-    }                                                                                                      \
-    else                                                                                                   \
-    {                                                                                                      \
-      MERROR("#TEST# Failed " << #genclass);                                                               \
-      failed_tests.push_back(#genclass);                                                                   \
-    }
-
+    REPLAY_REPORTING(genclass, generated && do_replay_events< genclass >(events))                          \
+    
 #define REPLAY_WITH_CORE(genclass, CORE)                                                                   \
     if (generated && replay_events_through_core_validate< genclass >(events, CORE))                        \
     {                                                                                                      \
@@ -1056,6 +1073,26 @@ inline bool do_replay_file(const std::string& filename)
     }                                                                                                      \
     CATCH_GENERATE_REPLAY(genclass);                                                                       \
   }
+  
+// Using the preprocessor's "stringify" (#) to convert class name to a char array
+#define GET_DAT_FILE(tests_folder, genclass) \
+  tests_folder + "/" + #genclass + std::string(".dat")
+  
+#define GENERATE_AND_PLAY_MULTIMODE(tests_folder, mode, genclass)                                                        \
+  switch (mode)                                                                                            \
+  {                                                                                                        \
+    case GenPlayMode::GEN_MODE_GENERATE:                                                                   \
+      GENERATE(GET_DAT_FILE(tests_folder, genclass), genclass);                                                          \
+    break;                                                                                                 \
+    case GenPlayMode::GEN_MODE_PLAY:                                                                       \
+      PLAY(GET_DAT_FILE(tests_folder, genclass), genclass);                                                              \
+    break;                                                                                                 \
+    case GenPlayMode::GEN_MODE_GENERATE_AND_PLAY:                                                          \
+      GENERATE_AND_PLAY(genclass);                                                                         \
+    break;                                                                                                 \
+    default:                                                                                               \
+      throw std::invalid_argument("GENERATE_AND_PLAY_MULTIMODE: unhandled mode");                          \
+  }
 
 #define GENERATE_AND_PLAY_INSTANCE(genclass, ins, CORE)                                                    \
   if (filter.empty() || boost::regex_match(std::string(#genclass), match, boost::regex(filter)))           \
diff --git a/tests/core_tests/chaingen_main.cpp b/tests/core_tests/chaingen_main.cpp
index c55154917..4a1323b3f 100644
--- a/tests/core_tests/chaingen_main.cpp
+++ b/tests/core_tests/chaingen_main.cpp
@@ -46,6 +46,11 @@ namespace
   const command_line::arg_descriptor<bool>        arg_test_transactions           = {"test_transactions", ""};
   const command_line::arg_descriptor<std::string> arg_filter                      = { "filter", "Regular expression filter for which tests to run" };
   const command_line::arg_descriptor<bool>        arg_list_tests                  = {"list_tests", ""};
+  
+  bool should_play(const GenPlayMode & mode)
+  {
+      return mode == GenPlayMode::GEN_MODE_PLAY || mode == GenPlayMode::GEN_MODE_GENERATE_AND_PLAY;
+  }
 }
 
 int main(int argc, char* argv[])
@@ -89,213 +94,247 @@ int main(int argc, char* argv[])
 
   size_t tests_count = 0;
   std::vector<std::string> failed_tests;
-  std::string tests_folder = command_line::get_arg(vm, arg_test_data_path);
-  bool list_tests = false;
+  const std::string tests_folder = command_line::get_arg(vm, arg_test_data_path);
+  const bool list_tests = command_line::get_arg(vm, arg_list_tests);
+  GenPlayMode gen_play_mode = GenPlayMode::GEN_MODE_NONE;
   if (command_line::get_arg(vm, arg_generate_test_data))
   {
-    GENERATE("chain001.dat", gen_simple_chain_001);
+    gen_play_mode = GenPlayMode::GEN_MODE_GENERATE;
   }
   else if (command_line::get_arg(vm, arg_play_test_data))
   {
-    PLAY("chain001.dat", gen_simple_chain_001);
+    gen_play_mode = GenPlayMode::GEN_MODE_PLAY;
+  }
+  else if (command_line::get_arg(vm, arg_generate_and_play_test_data) || list_tests)
+  {
+    gen_play_mode = GenPlayMode::GEN_MODE_GENERATE_AND_PLAY;
+  }
+  else if (command_line::get_arg(vm, arg_test_transactions))
+  {
+    CALL_TEST("TRANSACTIONS TESTS", test_transactions);
+  }
+  else
+  {
+    MERROR("Wrong arguments");
+    return 2;
   }
-  else if (command_line::get_arg(vm, arg_generate_and_play_test_data) || (list_tests = command_line::get_arg(vm, arg_list_tests)))
+  
+  if (gen_play_mode == GenPlayMode::GEN_MODE_GENERATE)
+  {
+    if (! epee::file_io_utils::is_file_exist(tests_folder))
+    {
+      if (! boost::filesystem::create_directory(tests_folder))
+      {
+        MERROR("Couldn't create directory:" << tests_folder);
+        return 3;
+      }
+    }
+  }
+  
+  if (gen_play_mode != GenPlayMode::GEN_MODE_NONE)
   {
-    GENERATE_AND_PLAY(gen_simple_chain_001);
-    GENERATE_AND_PLAY(gen_simple_chain_split_1);
-    GENERATE_AND_PLAY(one_block);
-    GENERATE_AND_PLAY(gen_chain_switch_1);
-    GENERATE_AND_PLAY(gen_ring_signature_1);
-    GENERATE_AND_PLAY(gen_ring_signature_2);
-    //GENERATE_AND_PLAY(gen_ring_signature_big); // Takes up to XXX hours (if CRYPTONOTE_MINED_MONEY_UNLOCK_WINDOW == 10)
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_simple_chain_001);
+    
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_simple_chain_split_1);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, one_block);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_chain_switch_1);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_ring_signature_1);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_ring_signature_2);
+    //GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_ring_signature_big); // Takes up to XXX hours (if CRYPTONOTE_MINED_MONEY_UNLOCK_WINDOW == 10)
 
     // Block verification tests
-    GENERATE_AND_PLAY(gen_block_big_major_version);
-    GENERATE_AND_PLAY(gen_block_big_minor_version);
-    GENERATE_AND_PLAY(gen_block_ts_not_checked);
-    GENERATE_AND_PLAY(gen_block_ts_in_past);
-    GENERATE_AND_PLAY(gen_block_ts_in_future);
-    GENERATE_AND_PLAY(gen_block_invalid_prev_id);
-    GENERATE_AND_PLAY(gen_block_invalid_nonce);
-    GENERATE_AND_PLAY(gen_block_no_miner_tx);
-    GENERATE_AND_PLAY(gen_block_unlock_time_is_low);
-    GENERATE_AND_PLAY(gen_block_unlock_time_is_high);
-    GENERATE_AND_PLAY(gen_block_unlock_time_is_timestamp_in_past);
-    GENERATE_AND_PLAY(gen_block_unlock_time_is_timestamp_in_future);
-    GENERATE_AND_PLAY(gen_block_height_is_low);
-    GENERATE_AND_PLAY(gen_block_height_is_high);
-    GENERATE_AND_PLAY(gen_block_miner_tx_has_2_tx_gen_in);
-    GENERATE_AND_PLAY(gen_block_miner_tx_has_2_in);
-    GENERATE_AND_PLAY(gen_block_miner_tx_with_txin_to_key);
-    GENERATE_AND_PLAY(gen_block_miner_tx_out_is_small);
-    GENERATE_AND_PLAY(gen_block_miner_tx_out_is_big);
-    GENERATE_AND_PLAY(gen_block_miner_tx_has_no_out);
-    GENERATE_AND_PLAY(gen_block_miner_tx_has_out_to_alice);
-    GENERATE_AND_PLAY(gen_block_has_invalid_tx);
-    GENERATE_AND_PLAY(gen_block_is_too_big);
-    GENERATE_AND_PLAY(gen_block_invalid_binary_format); // Takes up to 3 hours, if CRYPTONOTE_MINED_MONEY_UNLOCK_WINDOW == 500, up to 30 minutes, if CRYPTONOTE_MINED_MONEY_UNLOCK_WINDOW == 10
-    GENERATE_AND_PLAY(gen_block_late_v1_coinbase_tx);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_big_major_version);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_big_minor_version);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_ts_not_checked);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_ts_in_past);
+    if (should_play(gen_play_mode))
+    {
+        // Exception to the rule: This has to be regenerated each time.
+        GENERATE_AND_PLAY(gen_block_ts_in_future); 
+        GENERATE_AND_PLAY(gen_block_unlock_time_is_low);
+        GENERATE_AND_PLAY(gen_block_unlock_time_is_high);
+        GENERATE_AND_PLAY(gen_block_unlock_time_is_timestamp_in_past);
+        GENERATE_AND_PLAY(gen_block_unlock_time_is_timestamp_in_future);
+    }
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_invalid_prev_id);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_invalid_nonce);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_no_miner_tx);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_height_is_low);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_height_is_high);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_miner_tx_has_2_tx_gen_in);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_miner_tx_has_2_in);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_miner_tx_with_txin_to_key);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_miner_tx_out_is_small);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_miner_tx_out_is_big);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_miner_tx_has_no_out);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_miner_tx_has_out_to_alice);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_has_invalid_tx);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_is_too_big);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_invalid_binary_format); // Takes up to 3 hours, if CRYPTONOTE_MINED_MONEY_UNLOCK_WINDOW == 500, up to 30 minutes, if CRYPTONOTE_MINED_MONEY_UNLOCK_WINDOW == 10
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_late_v1_coinbase_tx);
 
     // Transaction verification tests
-    GENERATE_AND_PLAY(gen_tx_big_version);
-    GENERATE_AND_PLAY(gen_tx_unlock_time);
-    GENERATE_AND_PLAY(gen_tx_input_is_not_txin_to_key);
-    GENERATE_AND_PLAY(gen_tx_no_inputs_no_outputs);
-    GENERATE_AND_PLAY(gen_tx_no_inputs_has_outputs);
-    GENERATE_AND_PLAY(gen_tx_has_inputs_no_outputs);
-    GENERATE_AND_PLAY(gen_tx_invalid_input_amount);
-    GENERATE_AND_PLAY(gen_tx_input_wo_key_offsets);
-    GENERATE_AND_PLAY(gen_tx_sender_key_offest_not_exist);
-    GENERATE_AND_PLAY(gen_tx_key_offest_points_to_foreign_key);
-    GENERATE_AND_PLAY(gen_tx_mixed_key_offest_not_exist);
-    GENERATE_AND_PLAY(gen_tx_key_image_not_derive_from_tx_key);
-    GENERATE_AND_PLAY(gen_tx_key_image_is_invalid);
-    GENERATE_AND_PLAY(gen_tx_check_input_unlock_time);
-    GENERATE_AND_PLAY(gen_tx_txout_to_key_has_invalid_key);
-    GENERATE_AND_PLAY(gen_tx_output_with_zero_amount);
-    GENERATE_AND_PLAY(gen_tx_output_is_not_txout_to_key);
-    GENERATE_AND_PLAY(gen_tx_signatures_are_invalid);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_big_version);
+    if (should_play(gen_play_mode))
+    {
+        GENERATE_AND_PLAY(gen_tx_unlock_time);
+    }
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_input_is_not_txin_to_key);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_no_inputs_no_outputs);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_no_inputs_has_outputs);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_has_inputs_no_outputs);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_invalid_input_amount);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_input_wo_key_offsets);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_sender_key_offest_not_exist);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_key_offest_points_to_foreign_key);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_mixed_key_offest_not_exist);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_key_image_not_derive_from_tx_key);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_key_image_is_invalid);
+    if (should_play(gen_play_mode))
+    {
+        GENERATE_AND_PLAY(gen_tx_check_input_unlock_time);
+    }
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_txout_to_key_has_invalid_key);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_output_with_zero_amount);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_output_is_not_txout_to_key);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_tx_signatures_are_invalid);
 
     // Mempool
-    GENERATE_AND_PLAY(txpool_spend_key_public);
-    GENERATE_AND_PLAY(txpool_spend_key_all);
-    GENERATE_AND_PLAY(txpool_double_spend_norelay);
-    GENERATE_AND_PLAY(txpool_double_spend_local);
-    GENERATE_AND_PLAY(txpool_double_spend_keyimage);
-    GENERATE_AND_PLAY(txpool_stem_loop);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, txpool_spend_key_public);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, txpool_spend_key_all);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, txpool_double_spend_norelay);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, txpool_double_spend_local);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, txpool_double_spend_keyimage);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, txpool_stem_loop);
 
     // Double spend
-    GENERATE_AND_PLAY(gen_double_spend_in_tx<false>);
-    GENERATE_AND_PLAY(gen_double_spend_in_tx<true>);
-    GENERATE_AND_PLAY(gen_double_spend_in_the_same_block<false>);
-    GENERATE_AND_PLAY(gen_double_spend_in_the_same_block<true>);
-    GENERATE_AND_PLAY(gen_double_spend_in_different_blocks<false>);
-    GENERATE_AND_PLAY(gen_double_spend_in_different_blocks<true>);
-    GENERATE_AND_PLAY(gen_double_spend_in_different_chains);
-    GENERATE_AND_PLAY(gen_double_spend_in_alt_chain_in_the_same_block<false>);
-    GENERATE_AND_PLAY(gen_double_spend_in_alt_chain_in_the_same_block<true>);
-    GENERATE_AND_PLAY(gen_double_spend_in_alt_chain_in_different_blocks<false>);
-    GENERATE_AND_PLAY(gen_double_spend_in_alt_chain_in_different_blocks<true>);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_double_spend_in_tx<false>);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_double_spend_in_tx<true>);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_double_spend_in_the_same_block<false>);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_double_spend_in_the_same_block<true>);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_double_spend_in_different_blocks<false>);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_double_spend_in_different_blocks<true>);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_double_spend_in_different_chains);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_double_spend_in_alt_chain_in_the_same_block<false>);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_double_spend_in_alt_chain_in_the_same_block<true>);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_double_spend_in_alt_chain_in_different_blocks<false>);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_double_spend_in_alt_chain_in_different_blocks<true>);
 
-    GENERATE_AND_PLAY(gen_uint_overflow_1);
-    GENERATE_AND_PLAY(gen_uint_overflow_2);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_uint_overflow_1);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_uint_overflow_2);
 
-    GENERATE_AND_PLAY(gen_block_reward);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_reward);
 
-    GENERATE_AND_PLAY(gen_v2_tx_mixable_0_mixin);
-    GENERATE_AND_PLAY(gen_v2_tx_mixable_low_mixin);
-//    GENERATE_AND_PLAY(gen_v2_tx_unmixable_only);
-//    GENERATE_AND_PLAY(gen_v2_tx_unmixable_one);
-//    GENERATE_AND_PLAY(gen_v2_tx_unmixable_two);
-    GENERATE_AND_PLAY(gen_v2_tx_dust);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_v2_tx_mixable_0_mixin);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_v2_tx_mixable_low_mixin);
+//    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_v2_tx_unmixable_only);
+//    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_v2_tx_unmixable_one);
+//    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_v2_tx_unmixable_two);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_v2_tx_dust);
 
-    GENERATE_AND_PLAY(gen_rct_tx_valid_from_pre_rct);
-    GENERATE_AND_PLAY(gen_rct_tx_valid_from_rct);
-    GENERATE_AND_PLAY(gen_rct_tx_valid_from_mixed);
-    GENERATE_AND_PLAY(gen_rct_tx_pre_rct_bad_real_dest);
-    GENERATE_AND_PLAY(gen_rct_tx_pre_rct_bad_real_mask);
-    GENERATE_AND_PLAY(gen_rct_tx_pre_rct_bad_fake_dest);
-    GENERATE_AND_PLAY(gen_rct_tx_pre_rct_bad_fake_mask);
-    GENERATE_AND_PLAY(gen_rct_tx_rct_bad_real_dest);
-    GENERATE_AND_PLAY(gen_rct_tx_rct_bad_real_mask);
-    GENERATE_AND_PLAY(gen_rct_tx_rct_bad_fake_dest);
-    GENERATE_AND_PLAY(gen_rct_tx_rct_bad_fake_mask);
-    GENERATE_AND_PLAY(gen_rct_tx_rct_spend_with_zero_commit);
-    GENERATE_AND_PLAY(gen_rct_tx_pre_rct_zero_vin_amount);
-    GENERATE_AND_PLAY(gen_rct_tx_rct_non_zero_vin_amount);
-    GENERATE_AND_PLAY(gen_rct_tx_non_zero_vout_amount);
-    GENERATE_AND_PLAY(gen_rct_tx_pre_rct_duplicate_key_image);
-    GENERATE_AND_PLAY(gen_rct_tx_rct_duplicate_key_image);
-    GENERATE_AND_PLAY(gen_rct_tx_pre_rct_wrong_key_image);
-    GENERATE_AND_PLAY(gen_rct_tx_rct_wrong_key_image);
-    GENERATE_AND_PLAY(gen_rct_tx_pre_rct_wrong_fee);
-    GENERATE_AND_PLAY(gen_rct_tx_rct_wrong_fee);
-    GENERATE_AND_PLAY(gen_rct_tx_pre_rct_remove_vin);
-    GENERATE_AND_PLAY(gen_rct_tx_rct_remove_vin);
-    GENERATE_AND_PLAY(gen_rct_tx_pre_rct_add_vout);
-    GENERATE_AND_PLAY(gen_rct_tx_rct_add_vout);
-    GENERATE_AND_PLAY(gen_rct_tx_pre_rct_increase_vin_and_fee);
-    GENERATE_AND_PLAY(gen_rct_tx_pre_rct_altered_extra);
-    GENERATE_AND_PLAY(gen_rct_tx_rct_altered_extra);
-    GENERATE_AND_PLAY(gen_rct_tx_uses_output_too_early);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_valid_from_pre_rct);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_valid_from_rct);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_valid_from_mixed);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_pre_rct_bad_real_dest);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_pre_rct_bad_real_mask);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_pre_rct_bad_fake_dest);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_pre_rct_bad_fake_mask);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_rct_bad_real_dest);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_rct_bad_real_mask);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_rct_bad_fake_dest);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_rct_bad_fake_mask);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_rct_spend_with_zero_commit);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_pre_rct_zero_vin_amount);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_rct_non_zero_vin_amount);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_non_zero_vout_amount);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_pre_rct_duplicate_key_image);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_rct_duplicate_key_image);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_pre_rct_wrong_key_image);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_rct_wrong_key_image);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_pre_rct_wrong_fee);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_rct_wrong_fee);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_pre_rct_remove_vin);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_rct_remove_vin);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_pre_rct_add_vout);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_rct_add_vout);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_pre_rct_increase_vin_and_fee);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_pre_rct_altered_extra);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_rct_altered_extra);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct_tx_uses_output_too_early);
 
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_22_1_2);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_22_1_2_many_inputs);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_22_2_1);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_33_1_23);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_33_3_21);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_23_1_2);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_23_1_3);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_23_2_1);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_23_2_3);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_45_1_234);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_45_4_135_many_inputs);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_89_3_1245789);
-    GENERATE_AND_PLAY(gen_multisig_tx_invalid_23_1__no_threshold);
-    GENERATE_AND_PLAY(gen_multisig_tx_invalid_45_5_23_no_threshold);
-    GENERATE_AND_PLAY(gen_multisig_tx_invalid_22_1__no_threshold);
-    GENERATE_AND_PLAY(gen_multisig_tx_invalid_33_1__no_threshold);
-    GENERATE_AND_PLAY(gen_multisig_tx_invalid_33_1_2_no_threshold);
-    GENERATE_AND_PLAY(gen_multisig_tx_invalid_33_1_3_no_threshold);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_24_1_2);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_24_1_2_many_inputs);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_25_1_2);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_25_1_2_many_inputs);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_48_1_234);
-    GENERATE_AND_PLAY(gen_multisig_tx_valid_48_1_234_many_inputs);
-    GENERATE_AND_PLAY(gen_multisig_tx_invalid_24_1_no_signers);
-    GENERATE_AND_PLAY(gen_multisig_tx_invalid_25_1_no_signers);
-    GENERATE_AND_PLAY(gen_multisig_tx_invalid_48_1_no_signers);
-    GENERATE_AND_PLAY(gen_multisig_tx_invalid_48_1_23_no_threshold);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_22_1_2);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_22_1_2_many_inputs);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_22_2_1);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_33_1_23);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_33_3_21);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_23_1_2);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_23_1_3);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_23_2_1);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_23_2_3);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_45_1_234);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_45_4_135_many_inputs);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_89_3_1245789);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_invalid_23_1__no_threshold);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_invalid_45_5_23_no_threshold);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_invalid_22_1__no_threshold);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_invalid_33_1__no_threshold);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_invalid_33_1_2_no_threshold);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_invalid_33_1_3_no_threshold);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_24_1_2);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_24_1_2_many_inputs);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_25_1_2);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_25_1_2_many_inputs);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_48_1_234);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_valid_48_1_234_many_inputs);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_invalid_24_1_no_signers);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_invalid_25_1_no_signers);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_invalid_48_1_no_signers);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_multisig_tx_invalid_48_1_23_no_threshold);
 
-    GENERATE_AND_PLAY(gen_bp_tx_valid_1_before_12);
-    GENERATE_AND_PLAY(gen_bp_tx_invalid_1_from_12);
-    GENERATE_AND_PLAY(gen_bp_tx_invalid_1_1);
-    GENERATE_AND_PLAY(gen_bp_tx_valid_2);
-    GENERATE_AND_PLAY(gen_bp_tx_valid_3);
-    GENERATE_AND_PLAY(gen_bp_tx_valid_16);
-    GENERATE_AND_PLAY(gen_bp_tx_invalid_4_2_1);
-    GENERATE_AND_PLAY(gen_bp_tx_invalid_16_16);
-    GENERATE_AND_PLAY(gen_bp_txs_valid_2_and_2);
-    GENERATE_AND_PLAY(gen_bp_txs_invalid_2_and_8_2_and_16_16_1);
-    GENERATE_AND_PLAY(gen_bp_txs_valid_2_and_3_and_2_and_4);
-    GENERATE_AND_PLAY(gen_bp_tx_invalid_not_enough_proofs);
-    GENERATE_AND_PLAY(gen_bp_tx_invalid_empty_proofs);
-    GENERATE_AND_PLAY(gen_bp_tx_invalid_too_many_proofs);
-    GENERATE_AND_PLAY(gen_bp_tx_invalid_wrong_amount);
-    GENERATE_AND_PLAY(gen_bp_tx_invalid_borromean_type);
-    GENERATE_AND_PLAY(gen_bp_tx_invalid_bulletproof2_type);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_valid_1_before_12);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_invalid_1_from_12);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_invalid_1_1);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_valid_2);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_valid_3);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_valid_16);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_invalid_4_2_1);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_invalid_16_16);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_txs_valid_2_and_2);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_txs_invalid_2_and_8_2_and_16_16_1);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_txs_valid_2_and_3_and_2_and_4);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_invalid_not_enough_proofs);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_invalid_empty_proofs);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_invalid_too_many_proofs);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_invalid_wrong_amount);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_invalid_borromean_type);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_bp_tx_invalid_bulletproof2_type);
+    
 
-    GENERATE_AND_PLAY(gen_rct2_tx_clsag_malleability);
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_rct2_tx_clsag_malleability);
+    
 
-    GENERATE_AND_PLAY(gen_block_low_coinbase);
-
-    el::Level level = (failed_tests.empty() ? el::Level::Info : el::Level::Error);
-    if (!list_tests)
-    {
-      MLOG(level, "\nREPORT:");
-      MLOG(level, "  Test run: " << tests_count);
-      MLOG(level, "  Failures: " << failed_tests.size());
-    }
-    if (!failed_tests.empty())
+    GENERATE_AND_PLAY_MULTIMODE(tests_folder, gen_play_mode, gen_block_low_coinbase);
+    
+    if (should_play(gen_play_mode))
     {
-      MLOG(level, "FAILED TESTS:");
-      BOOST_FOREACH(auto test_name, failed_tests)
-      {
-        MLOG(level, "  " << test_name);
-      }
+        el::Level level = (failed_tests.empty() ? el::Level::Info : el::Level::Error);
+        if (!list_tests)
+        {
+          MLOG(level, "\nREPORT:");
+          MLOG(level, "  Test run: " << tests_count);
+          MLOG(level, "  Failures: " << failed_tests.size());
+        }
+        if (!failed_tests.empty())
+        {
+          MLOG(level, "FAILED TESTS:");
+          BOOST_FOREACH(auto test_name, failed_tests)
+          {
+            MLOG(level, "  " << test_name);
+          }
+        }
     }
+    
   }
-  else if (command_line::get_arg(vm, arg_test_transactions))
-  {
-    CALL_TEST("TRANSACTIONS TESTS", test_transactions);
-  }
-  else
-  {
-    MERROR("Wrong arguments");
-    return 2;
-  }
-
   return failed_tests.empty() ? 0 : 1;
 
   CATCH_ENTRY_L0("main", 1);
